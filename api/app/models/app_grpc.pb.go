// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: app.proto

package models

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppApi_SayHello_FullMethodName    = "/AppApi/SayHello"
	AppApi_GuessNumber_FullMethodName = "/AppApi/GuessNumber"
)

// AppApiClient is the client API for AppApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppApiClient interface {
	// takes in both parmeter and has response
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// takes in no parameter but has response
	GuessNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HelloResponse, error)
}

type appApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAppApiClient(cc grpc.ClientConnInterface) AppApiClient {
	return &appApiClient{cc}
}

func (c *appApiClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, AppApi_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appApiClient) GuessNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, AppApi_GuessNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppApiServer is the server API for AppApi service.
// All implementations must embed UnimplementedAppApiServer
// for forward compatibility
type AppApiServer interface {
	// takes in both parmeter and has response
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	// takes in no parameter but has response
	GuessNumber(context.Context, *empty.Empty) (*HelloResponse, error)
	mustEmbedUnimplementedAppApiServer()
}

// UnimplementedAppApiServer must be embedded to have forward compatible implementations.
type UnimplementedAppApiServer struct {
}

func (UnimplementedAppApiServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAppApiServer) GuessNumber(context.Context, *empty.Empty) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuessNumber not implemented")
}
func (UnimplementedAppApiServer) mustEmbedUnimplementedAppApiServer() {}

// UnsafeAppApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppApiServer will
// result in compilation errors.
type UnsafeAppApiServer interface {
	mustEmbedUnimplementedAppApiServer()
}

func RegisterAppApiServer(s grpc.ServiceRegistrar, srv AppApiServer) {
	s.RegisterService(&AppApi_ServiceDesc, srv)
}

func _AppApi_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppApi_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppApi_GuessNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppApiServer).GuessNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppApi_GuessNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppApiServer).GuessNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AppApi_ServiceDesc is the grpc.ServiceDesc for AppApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AppApi",
	HandlerType: (*AppApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _AppApi_SayHello_Handler,
		},
		{
			MethodName: "GuessNumber",
			Handler:    _AppApi_GuessNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
