// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AppApi } from "./app";
import type { Empty } from "./google/protobuf/empty";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloResponse } from "./app";
import type { HelloRequest } from "./app";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service AppApi
 */
export interface IAppApiClient {
    /**
     * takes in both parmeter and has response
     *
     * @generated from protobuf rpc: SayHello(HelloRequest) returns (HelloResponse);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse>;
    /**
     * takes in no parameter but has response
     *
     * @generated from protobuf rpc: GuessNumber(google.protobuf.Empty) returns (HelloResponse);
     */
    guessNumber(input: Empty, options?: RpcOptions): UnaryCall<Empty, HelloResponse>;
}
/**
 * @generated from protobuf service AppApi
 */
export class AppApiClient implements IAppApiClient, ServiceInfo {
    typeName = AppApi.typeName;
    methods = AppApi.methods;
    options = AppApi.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * takes in both parmeter and has response
     *
     * @generated from protobuf rpc: SayHello(HelloRequest) returns (HelloResponse);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloRequest, HelloResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * takes in no parameter but has response
     *
     * @generated from protobuf rpc: GuessNumber(google.protobuf.Empty) returns (HelloResponse);
     */
    guessNumber(input: Empty, options?: RpcOptions): UnaryCall<Empty, HelloResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, HelloResponse>("unary", this._transport, method, opt, input);
    }
}
