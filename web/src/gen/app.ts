// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message HelloResponse
 */
export interface HelloResponse {
    /**
     * @generated from protobuf field: bool isSuccess = 1;
     */
    isSuccess: boolean;
    /**
     * @generated from protobuf field: string sentence = 2;
     */
    sentence: string;
    /**
     * @generated from protobuf field: string reason = 3;
     */
    reason: string;
}
/**
 * @generated from protobuf message GuessNumberResponse
 */
export interface GuessNumberResponse {
    /**
     * @generated from protobuf field: bool isSuccess = 1;
     */
    isSuccess: boolean;
    /**
     * @generated from protobuf field: repeated int32 userRegions = 2;
     */
    userRegions: number[]; // / array of object 
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 3;
     */
    time?: Timestamp; // example of using time
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor() {
        super("HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloRequest>): HelloRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<HelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloRequest): HelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloResponse$Type extends MessageType<HelloResponse> {
    constructor() {
        super("HelloResponse", [
            { no: 1, name: "isSuccess", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "sentence", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloResponse>): HelloResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isSuccess = false;
        message.sentence = "";
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<HelloResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloResponse): HelloResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isSuccess */ 1:
                    message.isSuccess = reader.bool();
                    break;
                case /* string sentence */ 2:
                    message.sentence = reader.string();
                    break;
                case /* string reason */ 3:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isSuccess = 1; */
        if (message.isSuccess !== false)
            writer.tag(1, WireType.Varint).bool(message.isSuccess);
        /* string sentence = 2; */
        if (message.sentence !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sentence);
        /* string reason = 3; */
        if (message.reason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloResponse
 */
export const HelloResponse = new HelloResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GuessNumberResponse$Type extends MessageType<GuessNumberResponse> {
    constructor() {
        super("GuessNumberResponse", [
            { no: 1, name: "isSuccess", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "userRegions", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "time", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GuessNumberResponse>): GuessNumberResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isSuccess = false;
        message.userRegions = [];
        if (value !== undefined)
            reflectionMergePartial<GuessNumberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GuessNumberResponse): GuessNumberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isSuccess */ 1:
                    message.isSuccess = reader.bool();
                    break;
                case /* repeated int32 userRegions */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userRegions.push(reader.int32());
                    else
                        message.userRegions.push(reader.int32());
                    break;
                case /* google.protobuf.Timestamp time */ 3:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GuessNumberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isSuccess = 1; */
        if (message.isSuccess !== false)
            writer.tag(1, WireType.Varint).bool(message.isSuccess);
        /* repeated int32 userRegions = 2; */
        if (message.userRegions.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userRegions.length; i++)
                writer.int32(message.userRegions[i]);
            writer.join();
        }
        /* google.protobuf.Timestamp time = 3; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GuessNumberResponse
 */
export const GuessNumberResponse = new GuessNumberResponse$Type();
/**
 * @generated ServiceType for protobuf service AppApi
 */
export const AppApi = new ServiceType("AppApi", [
    { name: "SayHello", options: {}, I: HelloRequest, O: HelloResponse },
    { name: "GuessNumber", options: {}, I: Empty, O: HelloResponse }
]);
